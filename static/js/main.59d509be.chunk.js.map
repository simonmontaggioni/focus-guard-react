{"version":3,"sources":["pomodoro/assets/sounds/Japanese-Temple-Bell-Small.wav","pomodoro/components/Display.jsx","pomodoro/components/TimeControl.jsx","pomodoro/components/Button.jsx","pomodoro/components/SwitchButton.jsx","pomodoro/components/Message.jsx","pomodoro/const/Messages.js","pomodoro/hooks/useInterval.js","pomodoro/components/Pomodoro.jsx","pomodoro/pages/HomePage.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Display","minutes","seconds","className","TimeControl","props","controlType","onClick","time","handleTime","Button","handleOnClick","text","SwitchButton","type","onChange","toggleAction","breakMessages","author","message","focusMessages","Message","messageLength","messageNumber","length","useInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","Pomodoro","useState","counter","setCounter","idle","setIdle","running","setRuning","showMessage","setShowMessage","showNotification","setShowNotification","soundOn","setSoundOn","messageType","setMessageType","Math","floor","random","setMessageNumber","setDelay","focusTime","setFocusTime","focusTimeValue","setFocusTimeValue","breakTimeValue","setBreakTimeValue","audioTag","saveCounterState","play","state","ref","src","alarmPath","HomePage","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.59d509be.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Japanese-Temple-Bell-Small.1408458d.wav\";","import React from 'react';\nimport '../css/Display.scss';\n\nconst Display = ({ minutes, seconds }) => {\n  return (\n    <div className='display'>\n      <span className='digits'>{minutes < 10 ? '0' + minutes : minutes}</span>\n      <span className={`colon ${seconds % 2 === 0 ? 'dark' : 'light'}`}>:</span>\n      <span className='digits'>{seconds < 10 ? '0' + seconds : seconds}</span>\n    </div>\n  );\n};\n\nexport default Display;\n","import React from 'react';\nimport '../css/TimeControl.scss';\n\nconst TimeControl = (props) => {\n  const handleIncreaseTime = () => {\n    if (props.time < 60) {\n      props.handleTime(props.time + 1);\n    }\n  };\n\n  const handleDecreaseTime = () => {\n    if (props.time > 0) {\n      props.handleTime(props.time - 1);\n    }\n  };\n\n  return (\n    <div className='time-control'>\n      <span className='text'>{props.controlType}</span>\n      <div className='button-group'>\n        <button onClick={handleIncreaseTime}>+</button>\n        <span className='time'>\n          {props.time < 10 ? '0' + props.time : props.time}\n        </span>\n        <button onClick={handleDecreaseTime}>-</button>\n      </div>\n      <span className='text'>Time</span>\n    </div>\n  );\n};\n\nexport default TimeControl;\n","import React from 'react';\nimport '../css/Button.scss';\n\nconst Button = (props) => {\n  return (\n    <div className='button' onClick={props.handleOnClick}>\n      <span>{props.text}</span>\n    </div>\n  );\n};\n\nexport default Button;\n","import React from 'react';\nimport '../css/SwitchButton.scss';\n\nconst SwitchButton = (props) => {\n  return (\n    <div>\n      <div className='switch-button'>\n        <div className='description'>{props.text}</div>\n        <label className='switch'>\n          <input\n            // default='checked'\n            type='checkbox'\n            onChange={props.toggleAction}\n          />\n          <div className='slider'>\n            <div className='content'>\n              <span className='off-text'>OFF</span>\n              <span className='on-text'>ON</span>\n            </div>\n          </div>\n        </label>\n      </div>\n    </div>\n  );\n};\n\nexport default SwitchButton;\n","import React from 'react';\nimport '../css/Message.scss';\nimport { BREAK_MESSAGES } from '../const/Messages';\nimport { FOCUS_MESSAGES } from '../const/Messages';\n\nconst breakMessages = BREAK_MESSAGES;\nconst focusMessages = FOCUS_MESSAGES;\n\nconst Message = (props) => {\n  let messageLength = 0;\n  if (focusMessages[props.messageNumber].message) {\n    messageLength = focusMessages[props.messageNumber].message.length;\n  } else {\n    messageLength = breakMessages[props.messageNumber].message.length;\n  }\n  return (\n    <div\n      className={`message-container ${\n        props.type === 'focus' ? 'focus-shadow' : 'brake-shadow'\n      }`}\n    >\n      <p className={`message ${messageLength > 100 ? 'small-font' : ''}`}>\n        {props.type === 'focus'\n          ? `\"  ${focusMessages[props.messageNumber].message} \"`\n          : `\"  ${breakMessages[props.messageNumber].message} \"`}\n      </p>\n      <p className={`author ${messageLength > 100 ? 'small-font' : ''}`}>\n        <span>{'<<'}</span>\n        {props.type === 'focus'\n          ? focusMessages[props.messageNumber].author\n          : breakMessages[props.messageNumber].author}\n        <span>{'>>'}</span>\n      </p>\n    </div>\n  );\n};\n\nexport default Message;\n","export const BREAK_MESSAGES = [\n  {\n    author: 'Anon',\n    message: \"It's time to rest, you have done very well\",\n  },\n  {\n    author: 'Christopher Paolini',\n    message:\n      'No one can function properly without some peace and quiet from time to time.',\n  },\n  {\n    author: 'Zig Ziglar',\n    message:\n      'Difficult roads often lead to beautiful destinations. The best is yet to come.',\n  },\n  {\n    author: 'Robert Tew',\n    message:\n      \"Trust yourself. You've survived a lot, and you'll survive whatever is coming.\",\n  },\n  {\n    author: 'Mahatma Gandhi',\n    message: 'There is more to life than increasing its speed.',\n  },\n  {\n    author: 'William Burroughs',\n    message:\n      'Your mind will answer most questions if you learn to relax and wait for the answer.',\n  },\n  {\n    author: 'Heather Stillufse',\n    message:\n      'Keep walking through the storm. Your rainbow is waiting on the other side.',\n  },\n  {\n    author: 'Kahlil Gibran',\n    message:\n      'Our anxiety does not come from thinking about the future, but from wanting to control it.',\n  },\n  {\n    author: 'Bryant McGill',\n    message:\n      'Your calm mind is the ultimate weapon against your challenges. So relax.',\n  },\n  {\n    author: 'Tony DeLiso',\n    message: 'Happiness is part of who we are. Joy is the feeling',\n  },\n];\nexport const FOCUS_MESSAGES = [\n  {\n    author: 'Anonymous',\n    message: 'Work smart, not hard.',\n  },\n  {\n    author: 'Anonymous',\n    message:\n      'Good things happen to those who wait for them. The best pass to those who go for them',\n  },\n  {\n    author: 'Bill Gates',\n    message:\n      'My success, part of it certainly, is that I have focused in on a few things.',\n  },\n  {\n    author: 'Anonymous',\n    message:\n      'Working hard will take you to the top, enjoying the road will take you further.',\n  },\n  {\n    author: 'Aristotle Onassis',\n    message:\n      'It is during our darkest moments that we must focus to see the light.',\n  },\n  {\n    author: 'Alexander Graham Bell',\n    message:\n      'Concentrate all your thoughts upon the work at hand. The sun’s rays do not burn until brought to a focus.',\n  },\n  {\n    author: 'Will Durant',\n    message:\n      'We are what we repeatedly do. Excellence, then, is not an act but a habit.',\n  },\n  {\n    author: 'Bruce Lee',\n    message:\n      'The successful warrior is the average man, with laser-like focus.',\n  },\n  {\n    author: 'Warren Buffett',\n    message:\n      'You only have to do a very few things right in your life so long as you don’t do too many things wrong.',\n  },\n  {\n    author: 'Joy Page',\n    message:\n      'Instead of focusing on that circumstances that you cannot change, focus strongly and powerfully on the circumstances that you can.',\n  },\n];\n","import { useEffect, useRef } from 'react';\n\nconst useInterval = (callback, delay) => {\n  const savedCallback = useRef();\n\n  // Remember the latest function.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n};\n\nexport default useInterval;\n","import React, { useState, useRef } from 'react';\nimport Display from './Display';\nimport '../css/Pomodoro.scss';\nimport TimeControl from './TimeControl';\nimport Button from './Button';\nimport SwitchButton from './SwitchButton';\nimport Message from '../components/Message';\nimport alarmPath from '../assets/sounds/Japanese-Temple-Bell-Small.wav';\n\nimport useInterval from '../hooks/useInterval';\n\nconst MINUTES = 2;\nconst SECONDS = 0;\nconst DEFAULT_DELAY = 50;\nconst MAX_TIME_VALUE = 59;\n\nconst Pomodoro = () => {\n  const [counter, setCounter] = useState({\n    minutes: MINUTES,\n    seconds: SECONDS,\n  });\n  const [idle, setIdle] = useState(true);\n  const [running, setRuning] = useState(false);\n  const [showMessage, setShowMessage] = useState(false);\n  const [showNotification, setShowNotification] = useState(true);\n  const [soundOn, setSoundOn] = useState(true);\n  const [messageType, setMessageType] = useState('focus');\n  const [messageNumber, setMessageNumber] = useState(\n    Math.floor(Math.random() * 10)\n  );\n  const [delay, setDelay] = useState(null);\n  const [focusTime, setFocusTime] = useState(true);\n  const [focusTimeValue, setFocusTimeValue] = useState(MINUTES);\n  const [breakTimeValue, setBreakTimeValue] = useState(5);\n  const audioTag = useRef();\n\n  const saveCounterState = (minutes, seconds) => {\n    setCounter({ ...counter, minutes, seconds });\n  };\n\n  const countDown = () => {\n    if (counter.seconds > 0) {\n      saveCounterState(counter.minutes, counter.seconds - 1);\n    } else {\n      if (counter.minutes > 0) {\n        saveCounterState(counter.minutes - 1, MAX_TIME_VALUE);\n      } else {\n        if (focusTime) {\n          saveCounterState(breakTimeValue, SECONDS);\n          setMessageType('brake');\n        } else {\n          saveCounterState(focusTimeValue, SECONDS);\n          setMessageType('focus');\n        }\n        if (soundOn) {\n          audioTag.current.play();\n        }\n        setMessageNumber(Math.floor(Math.random() * 10));\n        setShowMessage(showNotification);\n        setFocusTime(!focusTime);\n      }\n    }\n  };\n\n  useInterval(countDown, delay);\n\n  const startCountDown = () => {\n    setDelay(DEFAULT_DELAY);\n    setRuning(true);\n  };\n\n  const handleReset = () => {\n    setDelay(null);\n    setRuning(false);\n    setIdle(true);\n    setShowMessage(false);\n    setMessageType('focus');\n    setCounter({ ...counter, minutes: focusTimeValue, seconds: SECONDS });\n  };\n\n  const handlePlay = () => {\n    if (running) {\n      setDelay(null);\n      setRuning(false);\n    } else {\n      setShowMessage(showNotification);\n      startCountDown();\n    }\n    setIdle(false);\n  };\n\n  const handleFocusTimeValue = (minutes) => {\n    if (idle) {\n      setFocusTimeValue(minutes);\n      saveCounterState(minutes, SECONDS);\n    }\n  };\n  const handleBreakTimeValue = (minutes) => {\n    if (idle) {\n      setBreakTimeValue(minutes);\n    }\n  };\n\n  const handleToogleNotification = () => {\n    setShowNotification(!showNotification);\n    if (setShowNotification && !idle) {\n      setShowMessage(!showNotification);\n    }\n  };\n\n  const handleToogleSound = () => {\n    setSoundOn(!soundOn);\n  };\n\n  const state = idle\n    ? 'idle'\n    : running\n    ? focusTime\n      ? 'focus'\n      : 'break'\n    : 'pause';\n\n  return (\n    <>\n      <div className='pomodoro'>\n        <div className='first-row'>\n          <SwitchButton\n            text={'Notifications'}\n            toggleAction={handleToogleNotification}\n          />\n          <TimeControl\n            controlType={'Break'}\n            handleTime={handleBreakTimeValue}\n            time={breakTimeValue}\n          />\n        </div>\n        <div className='second-row'>\n          <Button text={'Reset'} handleOnClick={handleReset} />\n          <div className={`${state}-shadow`}>\n            <Display minutes={counter.minutes} seconds={counter.seconds} />\n          </div>\n          <Button text={'Play/Pause'} handleOnClick={handlePlay} />\n        </div>\n        <div className='third-row'>\n          <SwitchButton text={'Sound'} toggleAction={handleToogleSound} />\n          <TimeControl\n            controlType={'Focus'}\n            handleTime={handleFocusTimeValue}\n            time={focusTimeValue}\n          />\n        </div>\n        <div className='audio-container'>\n          <audio ref={audioTag} src={alarmPath} />\n        </div>\n      </div>\n      {showMessage && (\n        <Message type={messageType} messageNumber={messageNumber} />\n      )}\n    </>\n  );\n};\n\nexport default Pomodoro;\n","import React from 'react';\nimport Pomodoro from '../components/Pomodoro';\nimport '../css/HomePage.scss';\n\nconst HomePage = () => {\n  return (\n    <div className='main-container'>\n      <h1>Focus Guard: a pomodoro timer.</h1>\n      <Pomodoro />\n    </div>\n  );\n};\n\nexport default HomePage;\n","import React from 'react';\nimport HomePage from './pomodoro/pages/HomePage';\n\nfunction App() {\n  return <HomePage />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}